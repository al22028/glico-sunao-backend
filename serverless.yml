useDotenv: true

service: glico-sunao-api-backend
frameworkVersion: "3"

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-ignore
  - serverless-deployment-bucket
  - serverless-plugin-tracing
  - serverless-dotenv-plugin

custom:
  # NOTE: Serverless Deployment Bucket Configuration
  # LINK - https://www.serverless.com/plugins/serverless-deployment-bucket
  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

  default:
    stage: dev

  # NOTE: Serverless Offline Configuration
  # LINK - https://www.serverless.com/plugins/serverless-offline
  serverless-offline:
    httpPort: 3333
    noPrependStageInUrl: true

  # NOTE: Serverless Prune Plugin Configuration
  # LINK - https://www.serverless.com/plugins/serverless-prune-plugin
  prune:
    automatic: true
    number: 3

  # NOTE: Serverless Python Requirements Configuration
  # LINK - https://www.serverless.com/plugins/serverless-python-requirements
  pythonRequirements:
    # comment out this options the first deployment
    # Cross compiling
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    slim: true
    # poetry
    usePoetry: true
    noDeploy:
      - pytest
      - boto3
      - black
      - mypy
      - isort
      - pytest-mock
      - pytest-cov
      - taskipy
      - ruff
      - faker

provider:
  name: aws
  # Default stage (default: dev)
  stage: ${opt:stage, self:custom.default.stage}
  # Default region (default: us-east-1)
  region: ap-northeast-1

  # x-ray tracing
  tracing:
    lambda: true
    apiGateway: true

  # Lambda configuration
  runtime: python3.11
  runtimeManagement: auto
  # Processor architecture: 'x86_64' or 'arm64' via Graviton2 (default: x86_64)
  architecture: x86_64
  # Default memory size for functions (default: 1024MB)
  memorySize: 1024
  # Default timeout for functions (default: 6 seconds)
  # Note: API Gateway has a maximum timeout of 30 seconds
  timeout: 30

  # NOTE: Serverless Deployment Bucket Configuration
  # LINK - https://www.serverless.com/plugins/serverless-deployment-bucket
  deploymentBucket:
    name: ${self:service}-deployment-bucket-${self:provider.stage}
    serverSideEncryption: AES256

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "s3:*"
          Resource: "*"

  environment:
    TZ: Asia/Tokyo
    # api config
    STAGE: ${opt:stage, self:custom.default.stage}
    API_VERSION_HASH: ${env:API_VERSION_HASH, "latest"}
    APP_API_BASE_URL: ${file(./env/${opt:stage, self:custom.default.stage}.yml):APP_API_BASE_URL}
    APP_API_CORS_ALLOWED_ORIGINS: ${file(./env/${opt:stage, self:custom.default.stage}.yml):APP_API_CORS_ALLOWED_ORIGINS}
    # lambda powertools config
    POWERTOOLS_LOG_LEVEL: ${file(./env/${opt:stage, self:custom.default.stage}.yml):POWERTOOLS_LOG_LEVEL}
    POWERTOOLS_SERVICE_NAME: ${file(./env/${opt:stage, self:custom.default.stage}.yml):POWERTOOLS_SERVICE_NAME}
    POWERTOOLS_DEV: ${file(./env/${opt:stage, self:custom.default.stage}.yml):POWERTOOLS_DEV}
    POWERTOOLS_DEBUG: ${file(./env/${opt:stage, self:custom.default.stage}.yml):POWERTOOLS_DEBUG}
    POWERTOOLS_TRACE_MIDDLEWARES: ${file(./env/${opt:stage, self:custom.default.stage}.yml):POWERTOOLS_TRACE_MIDDLEWARES}
    POWERTOOLS_TRACE_DISABLED: ${file(./env/${opt:stage, self:custom.default.stage}.yml):POWERTOOLS_TRACE_DISABLED}
    S3_QRCODE_LOG_BUCKET: ${file(./env/${opt:stage, self:custom.default.stage}.yml):S3_QRCODE_LOG_BUCKET}

package:
  # package.json devDependencies are not included in the deployment package
  excludeDevDependencies: true
  exclude:
    - ./**
  include:
    - src/**

functions:
  ApplicationApiHandler:
    name: ${self:service}-api-handler
    description: Glico SUNAO Application API Handler
    handler: src/v1/handlers/app.lambda_handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
